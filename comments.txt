COMP30024 Artificial Intelligence
Project A - Checking Board Win State
ajmorton Andrew Morton 522139
rhysw    Rhys Williams 661561

Structure of code:
	Step 1. Read in Values
		The board is read in left to right, top to bottom. 
		Reads in an array of chars (board), a list of captured
		cells (as Points with x and y values) called 'captureList'
		and sets a flag (gameFinished) if the board is not in a final
		state 

	Pseudo code
		for (each cell on board) {
			board[i,j] = readInValue();
			if(readInValue == '-'){
				CaptureList.Append((i,j));
			} else if(readInValue == '+'){
				IsFinalFlag == False;
			} else if(readInValue != ('B','W')){
				//Throw error
			}
		}

	Step 2 a) Iterate though CaptureList
		While capturelist is not empty, run adjacencyCheck on 
		the first element in the list (removing it from the list
		at the same time). Due to how captureList is populated
		the topmost, leftmost cell on the board will be selected.
		The owner of the block of captures can be determined by simply
		checking either the cell above or the cell to the left
		(see special comments)
	
	Pseudo code:
		while(captureList.size() > 0) {
			Point p = captureList.get(0);
				int capturer = getPlayerFromChar(board[p.y - 1][p.x]);
				adjacencyCheck(p, points, capturer);
			}
			
		}


	Step 2 b) Run AdjacencyCheck
		adjacencyCheck checks all adjacent cells to the input cell, if the 
		adjacent cell is both a captured cell and not in captureList(to prevent
		double counting) adjacency check is run on that cell and a score 
		counter is incremented.  Capturer refers to the player which has
		captured the cell, and scores is an array to keep track of the number
		of captured cells for each player.

	Pseudo code:
		adjacencyCheck(cell, scores, capturer) {
			scores[capturer]++;
			captureList.remove(cell);
			for (All adjacent cells) {
				if(cell is on the board && cell is captured &&
						cell in captureList)
					adjacencyCheck(new cell);
				}
			}
		}
		
	Step 3. Print results
		First the winner is printed (dependent on the scores of the players 
		and the gameFinished flag). Then the scores of the players are 
		printed from the points array (scores[0] is black and scores[1] is white)

	Pseudo code:
		if(!gameFinished){
			System.out.println('None');
		} else if(scores[BLACK] == scores[WHITE]){
			System.out.println('Draw');
		} else if(scores[BLACK] > scores[WHITE]){
			System.out.println('Black');
		} else{
			System.out.println('White');
		}


Special comments:
	Some rules of the game determined are:
		1. Any adjacent captures (diagonals included) are owned by the same player

		2. A captured cell cannot have the non-capturing players pieces above, below, 
		   left or right of it in a legal board state.

		3. Moving left to right, top to bottom will always come across the topmost, 
		   leftmost capture in a block (topmost first). As the topmost, leftmost block 
		   it will always have the capturing players pieces both above and to the left 
		   of it and as such can easily determine the player who captured the entire block.
		   
		4. Ideally the captureList would be defined in the checkWinner function and be
		   passed to the adjacencyCheck function as required, however in Part A due to
		   the need for the board to be read in it was much simpler to define it as a
		   class variable.  However in Part B the captureList definition would be moved
		   to within the scope of the checkWinner function.


Time complexity:
	Ignoring the unavoidable cost of reading in the board to populate the 2D array and captureList [O(n^2)],
	the algorithm used will call adjacencyCheck once for each entry in captureList 
	(either recursively or reading in from captureList). As such the complexity of the algorithm
	is O(c), where c is the number of captured cells on the board. 
	
	This is likely the fastest algorithm that can be utilised as it calls each captured cell only once and 
	determines the capturing player only once per block of captures. Any fewer calls would not provide the
	bare minimum amount of information required to properly score the game.

